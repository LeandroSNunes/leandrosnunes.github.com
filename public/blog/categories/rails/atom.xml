<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Leandro Nunes]]></title>
  <link href="http://LeandroSNunes.github.com/leandrosnunes/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://LeandroSNunes.github.com/leandrosnunes/"/>
  <updated>2015-02-07T18:45:56+00:00</updated>
  <id>http://LeandroSNunes.github.com/leandrosnunes/</id>
  <author>
    <name><![CDATA[Leandro Nunes]]></name>
    <email><![CDATA[leandronunes.dev@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Padrões para desenvolvimento com Rails]]></title>
    <link href="http://LeandroSNunes.github.com/leandrosnunes/blog/2013/02/11/padroes-para-desenvolvimento-com-rails/"/>
    <updated>2013-02-11T18:31:00+00:00</updated>
    <id>http://LeandroSNunes.github.com/leandrosnunes/blog/2013/02/11/padroes-para-desenvolvimento-com-rails</id>
    <content type="html"><![CDATA[<p>Todos nós gostamos (ou não) de codar com clareza e organização, dessa forma podemos dar possibilidades à terceiros e a nós mesmos
de efetuar manutenções no programa que desenvolvemos. Quando se trata de equipe de desenvolvimento, algumas regras
deveriam ser explícita e revisadas cotidianamente, pois a curva de entendimento para um novo dev no projeto pode ser
alta e em alguns casos, ficar com um a menos no time resulta na entrega de software mais rápido que ambientar um novo dev.</p>

<!-- more -->


<p>Pensando nesses conceitos, encontrei o artigo <a href="https://github.com/hopsoft/rails_standards/tree/rails-3-2"><em>Rails 3.2 Development Standards Guide</em></a>
do <a href="https://github.com/hopsoft">Nathan Hopkins</a> que baseando-se em princípios como o
<a href="http://en.wikipedia.org/wiki/You_ain't_gonna_need_it">YAGNI</a> e  <a href="http://en.wikipedia.org/wiki/KISS_principle">KISS</a> elaborou alguns
padrões a seguir quando se desenvolve em Rails, achei bastante interessante e resolvir compartilhar. Vejamos:</p>

<h2>Introdução</h2>

<p>Aplicar os princípios <a href="http://en.wikipedia.org/wiki/You_ain't_gonna_need_it">YAGNI</a> e
<a href="http://en.wikipedia.org/wiki/KISS_principle">KISS</a> para:.</p>

<ul>
<li>Arquitetura Geral</li>
<li>Produtos e Recursos da API</li>
<li>Implementações Específicas</li>
</ul>


<h2>Arquivos</h2>

<ul>
<li>Deve ser usado espaços e não tabs</li>
<li>Tabs devem ser iguais a dois espaços</li>
<li>Finais de linha no padrão Unix (\n)</li>
<li>Usar UTF-8 encoding</li>
</ul>


<h2>Documentação</h2>

<p>Faça um esforço para o código ser auto-explicativo.</p>

<ul>
<li>Prefira nomes descritivos em seu código. Por exemplo <code>user_count</code> é um nome melhor do que <code>len</code>.</li>
<li>Use comentários <a href="http://yardoc.org/">YARD</a> quando a documentação do código for considerado necessária.</li>
<li>Evite comentários no método quando ele for muito complexo; <em>refatoração</em> é melhor.</li>
</ul>


<h2>Diretrizes Gerais</h2>

<p>Essas diretrizes são baseadas nas regras de programação de <a href="http://sandimetz.com/">Sandi Metz</a> introduzidas no Ruby Rogues.
As regras são propositalmente agressiva e são projetadas para dar-lhe uma pausa para que o seu app não corra solto.
Espera-se que você vai quebrá-las por razões pragmáticas ... muito. Veja a nota na YAGNI e KISS.</p>

<ul>
<li>Classes não podem ter mais de 100 linhas de código.</li>
<li>Métodos não podem ser maior do que cinco linhas de código.</li>
<li>Os métodos podem ter no máximo 4 parâmetros.</li>
<li>Controllers só devem instanciar um objeto.</li>
<li>Views só devem ter acesso a uma variável de instância.</li>
<li>Nunca diretamente referêncie uma outra classe/módulo de dentro de uma classe. Estas referências devem ser passado por parâmetros.</li>
</ul>


<p><em>Seja atencioso ao aplicar estas regras. Se você está lutando contra o quadro (no caso de Scrum, Kaban, etc..), é hora de ser um pouco mais pragmático.</em></p>

<h2>Models</h2>

<ul>
<li>Nunca use finders dinâmicos. por exemplo <code>find_by_ …</code></li>
<li>Seja atencioso sobre o uso de callbacks e observers que podem levar ao acoplamento indesejado.</li>
</ul>


<p>Todos os modelos devem ser organizadas usando o seguinte formato:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyModel</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># extends ...................................................................</span>
</span><span class='line'>  <span class="c1"># includes ..................................................................</span>
</span><span class='line'>  <span class="c1"># security (i.e. attr_accessible) ...........................................</span>
</span><span class='line'>  <span class="c1"># relationships .............................................................</span>
</span><span class='line'>  <span class="c1"># validations ...............................................................</span>
</span><span class='line'>  <span class="c1"># callbacks .................................................................</span>
</span><span class='line'>  <span class="c1"># scopes ....................................................................</span>
</span><span class='line'>  <span class="c1"># additional config .........................................................</span>
</span><span class='line'>  <span class="c1"># class methods .............................................................</span>
</span><span class='line'>  <span class="c1"># public instance methods ...................................................</span>
</span><span class='line'>  <span class="c1"># protected instance methods ................................................</span>
</span><span class='line'>  <span class="c1"># private instance methods ..................................................</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>OBS: Os comentários listados acima deve existir no arquivo para servir como um lembrete visual do formato.</em></p>

<h2>Implementação de Models</h2>

<p>É geralmente uma boa idéia isolar diferentes obrigações em módulos separados.
Recomendamos o uso de Concerns como descrito neste <a href="http://37signals.com/svn/posts/3372-put-chubby-models-on-a-diet-with-concerns">post do blog</a>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Project </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-project
</span><span class='line'>  |-app&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>|-assets
</span><span class='line'>|-controllers
</span><span class='line'>|-helpers
</span><span class='line'>|-mailers
</span><span class='line'>|-models
</span><span class='line'>  |-concerns &lt;-----
</span><span class='line'>|-views
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Orientações</h3>

<ul>
<li>Operações CRUD que estão limitados a um único modelo deve ser implementada no modelo. Por exemplo, um método <code>full_name</code>
que concatena <code>first_name</code> e <code>last_name</code></li>
<li>Operações CRUD que ultrapassam este modelo devem ser implementadas como uma Concern. Por exemplo, um método <code>status</code> que
precisa olhar para vários outros modelos.</li>
<li>Operações simples não CRUD, devem ser implementadas como uma Concern.</li>
<li>Importante! Concerns devem ser isolados e independentes. Eles não devem fazer suposições sobre como o receiver é composto
em tempo de execução. É inaceitável que uma concern invoque métodos definidos em outras concerns, no entanto, invocando
métodos definidos no receiver pretendido é permitido.</li>
<li>Operações complexas multi-step devem ser implementadas como um processo. Veja abaixo.</li>
</ul>


<h2>Controllers</h2>

<p>Controladores devem higienizar parâmetros antes de realizar qualquer outra lógica. A solução preferida é inspirada por esta
<a href="https://gist.github.com/dhh/1975644">essência do DHH</a>.</p>

<p>Aqui está um exemplo de higienização de parâmetros.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ExampleController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Example.create(sanitized_params)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">update</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Example.find(params[:id]).update_attributes!(sanitized_params)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">protected</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def sanitized_params&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">params</span><span class="o">[</span><span class="ss">:example</span><span class="o">].</span><span class="n">slice</span><span class="p">(</span><span class="ss">:expected_param</span><span class="p">,</span> <span class="ss">:another_expected_param</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Processos</h2>

<p>Um processo é definido como uma operação multi-step, que inclui qualquer um dos seguintes itens.</p>

<ul>
<li>Uma transação com uma tarefa complexa está sendo realizada.</li>
<li>Uma chamada feita para um serviço externo.</li>
<li>Qualquer interação no nível do sistema operacional é executada.</li>
<li>O envio de e-mails, a exportação de arquivos, etc ..</li>
</ul>


<p>Em uma tentativa de gerir melhor os processos, nós seguimos vagamente alguns princípios de Domain Driven Development (DDD).
Ou seja, nós adicionamos um diretório <code>processes</code> em <code>app</code> para realizar implementações de nossos processos.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Project </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-project
</span><span class='line'>  |-app&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>|-assets
</span><span class='line'>|-controllers
</span><span class='line'>|-helpers
</span><span class='line'>|-mailers
</span><span class='line'>|-models
</span><span class='line'>|-processes &lt;-----
</span><span class='line'>|-views
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Recomendamos o uso de uma ferramenta como o <a href="https://github.com/hopsoft/hero">Hero</a> para ajudar
a modelar esses processos.</p>

<p><strong>Importante:</strong> Não use model ou controller callbacks para invocar um processo. Em vez disso, invocar processos diretamente
do controlador.</p>

<h2>Logging</h2>

<p>Nós usamos a gem <a href="https://github.com/rudionrails/yell">Yell</a> para registro. Aqui está um exemplo de configuração.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;example/</span><span class="n">config</span><span class="o">/</span><span class="n">application</span><span class="o">.</span><span class="n">rb</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module Example</span>
</span><span class='line'><span class="sr">  class Application &amp;lt; Rails::Application&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">log_levels</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:debug</span><span class="p">,</span> <span class="ss">:info</span><span class="p">,</span> <span class="ss">:warn</span><span class="p">,</span> <span class="ss">:error</span><span class="p">,</span> <span class="ss">:fatal</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># %m : The message to be logged</span>
</span><span class='line'><span class="c1"># %d : The ISO8601 Timestamp</span>
</span><span class='line'><span class="c1"># %L : The log level, e.g INFO, WARN</span>
</span><span class='line'><span class="c1"># %l : The log level (short), e.g. I, W</span>
</span><span class='line'><span class="c1"># %p : The PID of the process from where the log event occured</span>
</span><span class='line'><span class="c1"># %t : The Thread ID from where the log event occured</span>
</span><span class='line'><span class="c1"># %h : The hostname of the machine from where the log event occured</span>
</span><span class='line'><span class="c1"># %f : The filename from where the log event occured</span>
</span><span class='line'><span class="c1"># %n : The line number of the file from where the log event occured</span>
</span><span class='line'><span class="c1"># %F : The filename with path from where the log event occured</span>
</span><span class='line'><span class="c1"># %M : The method where the log event occured</span>
</span><span class='line'><span class="n">log_format</span> <span class="o">=</span> <span class="no">Yell</span><span class="o">.</span><span class="n">format</span><span class="p">(</span> <span class="s2">&quot;[%d] [%L] [%h][%p][%t] [%F:%n:%M] %m&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Yell</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">logger</span><span class="o">|</span>
</span><span class='line'>  <span class="n">logger</span><span class="o">.</span><span class="n">adapter</span> <span class="no">STDOUT</span><span class="p">,</span> <span class="ss">:level</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">log_levels</span><span class="p">,</span> <span class="ss">:format</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">log_format</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Extensions &amp; Monkey Patches</h2>

<ul>
<li>Seja pensativo sobre monkey patching e procure primeiro soluções alternativas.</li>
<li>Use um inicializador para carregar extensions e monkey patches.</li>
</ul>


<p>Todas as extensions e monkey patches deve estar em um diretório de extensões em lib.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Project </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|-project
</span><span class='line'>  |-app
</span><span class='line'>  |-config
</span><span class='line'>  |-db
</span><span class='line'>  |-lib&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>|-extensions &lt;-----
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Use módulos para estender objetos ou adicionar monkey patches. Isto fornece alguma consistência quando você precisa
para rastrear bugs.</p>

<p>Aqui está um exemplo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">CowboyString</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">downcase</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;self.upcase</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">::String.send(:include, CowboyString)</span>
</span><span class='line'><span class="sr">String.ancestors # =&gt; [String, CowboyString, Enumerable, Comparable, Object, Kernel]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Dependências de Gems</h2>

<p>Dependências de gems deve ser fixadas antes de implantar no aplicativo de produção. Isto vai garantir a estabilidade da aplicação.</p>

<p>Recomendamos o uso de <a href="http://gembundler.com/v1.2/gemfile.html">gerenciadores de dependência</a>. Ao utilizar um gerenciador de
dependência, certifique-se de especificar pelo menos as versões maiores ou menores. Aqui está um exemplo.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Gemfile&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.2.11&#39;</span> <span class="c1"># GOOD: exact</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt;0.9&#39;</span>     <span class="c1"># GOOD: tilde</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;yell&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;=1.2&#39;</span>   <span class="c1"># BAD: unspecific</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;nokogiri&#39;</span>        <span class="c1"># BAD: unversioned</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Bundler's Gemfile.lock resolve o mesmo problema, mas nós descobrimos que as atualizações indevidas do pacote podem causar problemas.
É muito melhor ser explícito no Gemfile para garantir a estabilidade do aplicativo.</p>

<p><strong>This will cause your project to slowy drift away from the bleeding edge</strong>. A estratégia deve ser empregada para garantir que o
projeto não se desvie muito do comportamento da versão da gem. Por exemplo, atualizar as gems regularmente (a cada 3-4 meses) e
ser vigilantes sobre os patches de segurança. Serviços como <a href="https://gemnasium.com/">Gemnasium</a> pode ajudar com isso.</p>

<h2>Uma nota sobre Frameworks frontend</h2>

<p>Coisas interessantes estão acontecendo no mundo dos frameworks frontend.</p>

<ul>
<li><a href="http://backbonejs.org/">Backbone</a></li>
<li><a href="http://emberjs.com/">Ember</a></li>
<li><a href="http://angularjs.org/">Angular</a></li>
<li><a href="http://knockoutjs.com/">Knockout</a></li>
<li>e muitos outros ...</li>
</ul>


<p>Ser cuidadoso sobre a decisão de usar um framework frontend. Pergunte-se se existe complexidade em manter e se a decisão é certa.
Muitas vezes existem soluções melhores e mais simples.</p>

<p>Leia os seguintes artigos antes de decidir. No final, você deve ser capaz de expressar por que sua decisão é a certa.</p>

<p><a href="http://37signals.com/svn/posts/3112-how-basecamp-next-got-to-be-so-damn-fast-without-using-much-client-side-ui">How Basecamp Next got to be so damn fast without using much client-side UI</a>
<a href="http://layervault.tumblr.com/post/30932219739/rails-in-realtime">Rails in Realtime</a>
<a href="http://layervault.tumblr.com/post/31462727280/rails-in-realtime-part-2">Rails in Realtime, Part 2</a>
Em ambos os casos estar atento a "layout thrashing", <a href="http://kellegous.com/j/2013/01/26/layout-performance/">conforme descrito aqui</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Corrigindo bugs do ambiente de teste de uma Rails Engine Mountable]]></title>
    <link href="http://LeandroSNunes.github.com/leandrosnunes/blog/2012/10/27/corrigindo-erros-do-ambiente-de-teste-de-uma-rails-engine-mountable/"/>
    <updated>2012-10-27T10:12:00+00:00</updated>
    <id>http://LeandroSNunes.github.com/leandrosnunes/blog/2012/10/27/corrigindo-erros-do-ambiente-de-teste-de-uma-rails-engine-mountable</id>
    <content type="html"><![CDATA[<p>Ao tentar executar a suite de testes em uma <a href="http://edgeapi.rubyonrails.org/classes/Rails/Engine.html">Rails Engine</a> fui surpreendido com alguns erros, então partir para campo afim de
descobrir o porquê das coisas não funcionarem convencionalmente como se esperava. Na página <a href="https://github.com/rails/rails/issues?labels=engines&amp;state=open">Issues</a>
 do Rails no <a href="https://github.com/">GitHub</a> vi que se tratava de bugs do Rails mesmo, no meu caso a versão 3.2.8.</p>

<p>Como não era somente um bug para corrigir e não achei um post relacionando todos, depois da garimpada na net, resolvi juntar
tudo e postar aqui.</p>

<p>Vou fazer um exemplo de execução de testes em uma Engine para exemplificar melhor. Nossa mega Engine vai se chamar
Blog (nesse momento estou inspirado), vamos lá então.</p>

<!-- more -->


<blockquote><p>Não vou entrar em detalhes sobre Rails Engine, se você não tem noção nenhuma do que seria isso pode começar aqui: <a href="http://www.akitaonrails.com/2010/05/10/rails-3-introducao-a-engines#.UIqn32lUMzE">http://www.akitaonrails.com/2010/05/10/rails-3-introducao-a-engines#.UIqn32lUMzE</a>  -  (Sto. @AkitaOnRails).</p>

<p>Futuramente (quando a faculdade deixar) pretendo fazer um exemplo para documentar também, ai coloco o link aqui ;)</p></blockquote>

<h2>Criando uma Rails Engine</h2>

<p>Vamos criar nossa app Blog.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails plugin new Blog --mountable
</span><span class='line'><span class="nb">cd </span>Blog
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>Vimos que criamos uma Engine isolada, dessa forma nossas classes serão englobadas no namespace Blog e criadas dentro de pastas nomeadas
pelo namespace.</em></p>

<p><img src="/images/bug_engine/estrutura.png" alt="Estrutura de pastas" /></p>

<p>Agora vamos gerar um Scaffold para ter o que testar ;P
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g scaffold Post title body:text
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Em uma Engine, temos tarefas rake específicas prefixadas com "app", as que nos interessam nesse momento são as relativas ao banco de dados</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake -T db&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;rake app:db:create <span class="c"># Create the database from config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)</span>
</span><span class='line'>rake app:db:drop <span class="c"># Drops the database for the current Rails.env (use db:drop:all to drop all databases)</span>
</span><span class='line'>rake app:db:fixtures:load <span class="c"># Load fixtures into the current environment&#39;s database.</span>
</span><span class='line'>rake app:db:migrate <span class="c"># Migrate the database (options: VERSION=x, VERBOSE=false).</span>
</span><span class='line'>rake app:db:migrate:status <span class="c"># Display status of migrations</span>
</span><span class='line'>rake app:db:rollback <span class="c"># Rolls the schema back to the previous version (specify steps w/ STEP=n).</span>
</span><span class='line'>rake app:db:schema:dump <span class="c"># Create a db/schema.rb file that can be portably used against any DB supported by AR</span>
</span><span class='line'>rake app:db:schema:load <span class="c"># Load a schema.rb file into the database</span>
</span><span class='line'>rake app:db:seed <span class="c"># Load the seed data from db/seeds.rb</span>
</span><span class='line'>rake app:db:setup <span class="c"># Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)</span>
</span><span class='line'>rake app:db:structure:dump <span class="c"># Dump the database structure to db/structure.sql. Specify another file with DB_STRUCTURE=db/my_structure.sql</span>
</span><span class='line'>rake app:db:version <span class="c"># Retrieves the current schema version number</span>
</span><span class='line'>rake db:create <span class="c"># Create the database from config/database.yml for the current Rails.env (use db:create:all to create all dbs in the config)</span>
</span><span class='line'>rake db:drop <span class="c"># Drops the database for the current Rails.env (use db:drop:all to drop all databases)</span>
</span><span class='line'>rake db:fixtures:load <span class="c"># Load fixtures into the current environment&#39;s database.</span>
</span><span class='line'>rake db:migrate <span class="c"># Migrate the database (options: VERSION=x, VERBOSE=false).</span>
</span><span class='line'>rake db:migrate:status <span class="c"># Display status of migrations</span>
</span><span class='line'>rake db:rollback <span class="c"># Rolls the schema back to the previous version (specify steps w/ STEP=n).</span>
</span><span class='line'>rake db:schema:dump <span class="c"># Create a db/schema.rb file that can be portably used against any DB supported by AR</span>
</span><span class='line'>rake db:schema:load <span class="c"># Load a schema.rb file into the database</span>
</span><span class='line'>rake db:seed <span class="c"># Load the seed data from db/seeds.rb</span>
</span><span class='line'>rake db:setup <span class="c"># Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the db first)</span>
</span><span class='line'>rake db:structure:dump <span class="c"># Dump the database structure to an SQL file</span>
</span><span class='line'>rake db:version <span class="c"># Retrieves the current schema version number</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Vamos criar nosso DB e executar as migrações</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake app:db:create
</span><span class='line'>rake app:db:migrate&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">==</span> CreateBlogPosts: <span class="nv">migrating</span> <span class="o">================================================</span>
</span><span class='line'>-- create_table<span class="o">(</span>:blog_posts<span class="o">)</span>
</span><span class='line'>-&gt; 0.0015s
</span><span class='line'><span class="o">==</span> CreateBlogPosts: migrated <span class="o">(</span>0.0016s<span class="o">)</span> <span class="o">=======================================</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p>Observe que a tabela criada é prefixada pelo nome da Engine.</p>

<p>Com o scaffold criamos toda a estrutura para os testes.</p></blockquote>

<p><img src="/images/bug_engine/teste.png" alt="Estrutura de pastas nos testes" /></p>

<p>Enfim, vamos aos erros.</p>

<h2>ERROS</h2>

<p>O scaffold já cria os testes funcionais para CRUD, veja o arquivo <code>test/functional/blog/posts_controller_test.rb</code>,
dessa forma já podemos executar os testes e ver se está tudo funfando.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><strong>Ops! deu pau ;(</strong></p></blockquote>

<h3>1) NoMethodError: undefined method `posts' for #&lt;Blog::PostsControllerTest:0x007f942c045ed0></h3>

<p>Esse error acontece devido nosso controller tentar carregar as fixtures do post que não foram carregadas/criadas, veja:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Blog</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;class PostsControllerTest &amp;lt; ActionController::TestCase</span>
</span><span class='line'><span class="sr">    setup do</span>
</span><span class='line'><span class="sr">        @post = posts(:one)</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr"> end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Você precisa explicitar isso para o <a href="http://api.rubyonrails.org/classes/ActiveSupport/TestCase.html">ActiveSupport::TestCase</a>,
abra o arquivo <code>test/test_helper.rb</code> e adicione: <code>ActiveSupport::TestCase.fixtures :all</code> no contexto onde as fixtures são carregadas.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Load fixtures from the engine&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:fixture_path</span><span class="o">=</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;ActiveSupport::TestCase.fixture_path = File.expand_path(&quot;../</span><span class="n">fixtures</span><span class="s2">&quot;, __FILE__)</span>
</span><span class='line'><span class="s2">ActiveSupport::TestCase.fixtures :all</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Agora rode os testes;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><strong>Ops! deu pau ;(</strong></p></blockquote>

<h3>2) ActiveRecord::StatementInvalid: Could not find table 'blog_posts'</h3>

<p>Esse error é devido as convenções não funcionarem aqui, se você reparou o path das fixtures está setado para raiz da pasta fixtures, então vamos alterar.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Load fixtures from the engine&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:fixture_path</span><span class="o">=</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;ActiveSupport::TestCase.fixture_path = File.expand_path(&quot;../</span><span class="n">fixtures</span><span class="o">/</span><span class="n">blog</span><span class="s2">&quot;, __FILE__)</span>
</span><span class='line'><span class="s2">ActiveSupport::TestCase.fixtures :all</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Agora rode os testes;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><strong>Ops! deu pau ;(</strong></p></blockquote>

<h3>3) ActiveRecord::StatementInvalid: SQLite3::SQLException: no such table: posts: DELETE FROM "posts"</h3>

<p>Como convenção, a fixture post tenta utilizar a tabela post, mais como vimos, estamos "namespaceados" pelo nome da engine,
então precisamos novamente explicitar para o ActiveSupport::TestCase que o objeto utilizado pela fixture post é <code>Blog::Post</code>,
dessa forma o <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecord</a> referencia a tabela correta.</p>

<p>Então adicione mais uma linha no seu test_helper.rb</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Load fixtures from the engine&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span><span class="o">.</span><span class="n">method_defined?</span><span class="p">(</span><span class="ss">:fixture_path</span><span class="o">=</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;ActiveSupport::TestCase.fixture_path = File.expand_path(&quot;../</span><span class="n">fixtures</span><span class="o">/</span><span class="n">blog</span><span class="s2">&quot;, __FILE__)</span>
</span><span class='line'><span class="s2">ActiveSupport::TestCase.fixtures :all</span>
</span><span class='line'><span class="s2">ActiveSupport::TestCase.set_fixture_class :posts =&amp;gt; Blog::Post</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Agora rode os testes;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><strong>Ops! deu pau ;(</strong></p></blockquote>

<h3>4) ActionController::RoutingError: No route matches {:id=>"980190962", :post=>{:body=>"MyText", :title=>"MyString"}, :controller=>"blog/posts", :action=>"update"}</h3>

<p>Vamos observar o arquivo de rotas, <code>config/routes.rb</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">BlogTest</span><span class="o">::</span><span class="no">Engine</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">resources</span> <span class="ss">:posts</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Realmente não temos a rota 'blog/posts' criada e não devemos criar, pois quando montamos nossa Engine em uma App mãe,
essa rota será criada devido nossa Engine ser isolada (--mountable), então a App precisa diferenciar a requisição ao
controller post da Engine da requisição do controller post dela mesma (caso tenha).</p>

<p>Não sei se expliquei bem, mais é só para justificar o porquê de não alterar esse arquivo.</p>

<p>Para resolver isso, vamos disponibilizar diretamente ao controller_test as rotas.
Em <code>test/functional/blog/posts_controller_test.rb</code> adicione:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>setup <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;@post <span class="o">=</span> posts<span class="o">(</span>:one<span class="o">)</span>
</span><span class='line'>@routes <span class="o">=</span> Engine.routes
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;end
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Agora rode os testes;</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<blockquote><p><strong>Congratulation!</strong></p></blockquote>

<p>Agora nossa suite de teste esta rodando, já podemos trabalhar. :P</p>

<p>Tentei explicar as correções de forma que quem esteja começando no mundo Rails possa entender o que está acontecendo e não
simplesmente copiar e colar o código para correção. Lembrando que também sou um aspirante Rails e estou aberto para correções
neste post caso cometi alguma gafe.</p>

<h2>Referencias</h2>

<ul>
<li><a href="https://github.com/rails/rails/issues/4971">https://github.com/rails/rails/issues/4971</a></li>
<li><a href="https://github.com/rails/rails/issues/6573">https://github.com/rails/rails/issues/6573</a></li>
</ul>


<h2>Mais sobre Engine</h2>

<ul>
<li><a href="http://edgeguides.rubyonrails.org/engines.html">http://edgeguides.rubyonrails.org/engines.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizando as Expressões Regulares no Rails]]></title>
    <link href="http://LeandroSNunes.github.com/leandrosnunes/blog/2012/09/22/organizando-as-expressoes-regulares-no-rails/"/>
    <updated>2012-09-22T14:55:00+00:00</updated>
    <id>http://LeandroSNunes.github.com/leandrosnunes/blog/2012/09/22/organizando-as-expressoes-regulares-no-rails</id>
    <content type="html"><![CDATA[<p>No dia a dia sempre necessitamos dos super poderes das Expressões Regulares para validações de formulários, replaces em
textos e tantas outras coisas mais, alguns patterns raramente mudam de um projeto para outro, o pattern para validar e-mails
é um exemplo.</p>

<!-- more -->


<p>Pensando nisso e aproveitando a estrutura do Rails que já possui a pasta <code> /lib </code>  para armazenar nossos códigos customizados,
criei um module "ER" para ir colecionando os patterns rotineiros.</p>

<blockquote><p>Neste post estou mostrando uma solução que encontrei pois ainda desconheço se o Rails possui alguma convenção para essa tarefa.</p></blockquote>

<h2>Vamos ver a ideia!</h2>

<p>Na pasta <code> /lib </code> criei um arquivo <code> er.rb </code>  que será nosso "repositório de ERs".</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ER</span>
</span><span class='line'>  <span class="c1"># Pattern para validação de e-mail</span>
</span><span class='line'>  <span class="no">EMAIL</span> <span class="o">=</span> <span class="sr">/&lt;sup&gt;[&lt;sup&gt;@][\w.-]+@[\w.-]+[.][a-z]{2,4}$/i</span><span class="o">&lt;</span><span class="sr">/sup&gt;&lt;/su</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c1"># Pattern para validação de data no padrão 99/99/9999</span>
</span><span class='line'>  <span class="no">DATE</span> <span class="o">=</span> <span class="sr">/&lt;sup&gt;(([012][0-9])|(3[01]))\/(0[1-9]|1[012])\/\d{4}$/</span><span class="o">&lt;</span><span class="sr">/sup&gt;</span>
</span><span class='line'><span class="sr">  # Pattern para validação de data no padrão 9999-99-99</span>
</span><span class='line'><span class="sr">  DATE_DB = /</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="p">\</span><span class="n">d</span><span class="p">{</span><span class="mi">4</span><span class="p">}</span><span class="o">-</span><span class="p">(</span><span class="mi">0</span><span class="o">[</span><span class="mi">1</span><span class="o">-</span><span class="mi">9</span><span class="o">]|</span><span class="mi">1</span><span class="o">[</span><span class="mo">012</span><span class="o">]</span><span class="p">)</span><span class="o">-</span><span class="p">((</span><span class="o">[</span><span class="mo">012</span><span class="o">][</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="o">]</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="mi">3</span><span class="o">[</span><span class="mo">01</span><span class="o">]</span><span class="p">))</span><span class="vg">$/</span><span class="o">&lt;</span><span class="sr">/sup&gt;</span>
</span><span class='line'><span class="sr">  # Pattern para validação de horas sem os segungos no padrão 99:99</span>
</span><span class='line'><span class="sr">  TIME_H_M = /</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="p">((</span><span class="o">[</span><span class="mo">01</span><span class="o">]</span><span class="p">\</span><span class="n">d</span><span class="p">)</span><span class="o">|</span><span class="p">(</span><span class="mi">2</span><span class="o">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">3</span><span class="o">]</span><span class="p">)):(</span><span class="o">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">5</span><span class="o">]</span><span class="p">\</span><span class="n">d</span><span class="p">)</span><span class="vg">$/</span><span class="o">&lt;</span><span class="sr">/sup&gt;</span>
</span><span class='line'><span class="sr">  # Pattern para validação de urls, permitido os protocolos http e https</span>
</span><span class='line'><span class="sr">  URL = /</span><span class="o">&lt;</span><span class="n">sup</span><span class="o">&gt;</span><span class="p">(</span><span class="n">http</span><span class="o">|</span><span class="n">https</span><span class="p">):\</span><span class="o">/</span><span class="p">\</span><span class="o">/[</span><span class="n">a</span><span class="o">-</span><span class="n">z0</span><span class="o">-</span><span class="mi">9</span><span class="o">]+</span><span class="p">(</span><span class="o">[-.]</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="n">z0</span><span class="o">-</span><span class="mi">9</span><span class="o">]+</span><span class="p">)</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;.</span><span class="n">[a</span><span class="o">-</span><span class="n">z</span><span class="o">]</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">}((</span><span class="o">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="o">]</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">})</span><span class="sc">?\</span><span class="o">/.</span><span class="n">&lt;</span><span class="sr">/em&gt;)?$/ix</span><span class="o">&lt;</span><span class="sr">/sup&gt;</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Utilizando</h2>


<p>Para exemplificar, vamos validar um model User.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;er&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:full_name</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="n">presence</span><span class="ss">:true</span><span class="p">,</span>  <span class="nb">format</span><span class="p">:{</span><span class="n">with</span><span class="p">:</span> <span class="no">ER</span><span class="o">::</span><span class="no">EMAIL</span><span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Perceberam a chamada do pattern? :P</p>

<p>Para validação em front-end utilizando o atributo <code> pattern </code> do HTML5, podemos reaproveitar nossos patterns, só que
precisamos de um passo a mais devido o padrão ser ER crua sem estar contida em "//" (barras).</p>

<p>Criei então um Help para fazer essa tarefa e as View continuarem fazendo apenas seu papel.
No arquivo <code> app/helpers/application_helper.rb </code>  incluir:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">er_for_html</span><span class="p">(</span><span class="n">er</span><span class="p">)</span>
</span><span class='line'>  <span class="k">begin</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;ER.const_get(er.upcase.to_sym).source</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  rescue NameError =&gt; exc&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s2">&quot;A expressao solicitada nao existe&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notem que usei <code> Module#const_get </code>  para pegar a referência da constante informado e no fim o
<code> Regexp#source </code>  que retorna a string original que está envolvida por "//" <br />
Ficando no formulário:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= f.text_field(:email, :class =</span><span class="o">&gt;</span> <span class="ss">:span3</span><span class="p">,</span> <span class="ss">:pattern</span> <span class="o">=&gt;</span> <span class="n">er_for_html</span><span class="p">(</span><span class="s2">&quot;email&quot;</span><span class="p">),</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:required</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s2">&quot;E-mail&quot;</span> <span class="p">)</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Concluíndo</h2>


<p>É isso ai, a intenção é só para mostar uma possibilidade de organizar as coisas, claro que deve possuir outras, dessa forma,
aceito sugestões e dicas. :)</p>

<p>Para uma consulta rápida sobre metacaracteres o Aurélio disponibiliza um guia rápido <a href="http://piazinho.com.br/download/expressoes-regulares-3-tabelas.pdf" title="Ir para outra página">http://piazinho.com.br/download/expressoes-regulares-3-tabelas.pdf</a>.<br />
Para se aprofundar, leia o livro <a href="http://piazinho.com.br/" title="Ir para página do livro">Expressões Regulares - Uma abordagem divertida</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implementando aplicações Rails com Capistrano]]></title>
    <link href="http://LeandroSNunes.github.com/leandrosnunes/blog/2012/04/06/Implementando-aplicacoes-rails-com-capistrano/"/>
    <updated>2012-04-06T17:37:00+00:00</updated>
    <id>http://LeandroSNunes.github.com/leandrosnunes/blog/2012/04/06/Implementando-aplicacoes-rails-com-capistrano</id>
    <content type="html"><![CDATA[<p>
Chegou a hora de implantar a aplicação para os primeiros testes do cliente?<br />
Vamos ver como a dupla sertaneja <a href="http://rubyonrails.org/" title="Framework em Ruby para desenvolvimento de aplicações web">Rails</a> & <a href="http://capistranorb.com/">Capistrano</a> soam bem nesta tarefa.
</p>


<!-- more -->


<p>
O Capistrano é uma gem para implantar (deploy) aplicações web. Inicialmente desenvolvida para Rails, 
tem a finalidade de enviar seu código fonte para um servidor web e permitir o versionamento, ou seja, 
te dando super poderes para voltar a versão anterior do seu código caso algo dê errado na versão atual. 
Com um pouquinho de configuração o Capistrano pode ser utilizado para outros framework/linguagem. 
</p>




<p>
Vamos adimitir que você já tenha conhecimento em Sistemas de Controle de Versão (<a href="http://github.com/" title="Sistema de controle de versão distribuído">Git</a>, <a href="http://subversion.apache.org/" title="Sistema de controle de versão centralizado" >SVN</a>, etc) e que seu 
ambiente de desenvolvimento esteja funfando com a aplicação.
</p>


<p><em>Hoje foi o meu primeiro contato com o Capistrano, abaixo segue minhas descobertas.</em></p>

<h2>Requisitos</h2>




<p>
Para executar esta tarefa temos que verificar em nossa maleta de ferramentas se está presente:
</p>


<ul>
    <li><a href="http://www.ruby-lang.org/en/">Ruby</a></li>
    <li>Uma aplicação (no meu caso em Rails)</li>
    <li>Servidor Web com suporte a SSH</li>
    <li>Terminal (bash, sh, etc…)</li>
    <li>Um repositório (No meu caso GIT)</li>
</ul>




<h2>Instalação</h2>


<p>
Como citado, o Capistrano é um gem e com isso você pode instalar do jeito tradicional mesmo. <br />
É, aquele fácil! Fazemos assim:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install capistrano
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
O capistrano adiciona alguns utilitários de linha de comando, o <code>cap</code> e <code>capify</code> iremos conhecer mais abaixo.
Também é possível adicionar esta gem no arquivo GemFile do seu projeto.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
e depois executar o <code>bundle install</code> em seu terminal.
</p>




<h2>Iniciando</h2>


<p>
Agora utilizamos o <code>capify</code> , nosso amigo de linha de comando para fazer com que o Capistrano monitore nossa work area e nos dê opções para configurá-lo. Primeiramente temos que estar na raiz do diretório do nosso projeto.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /app_rails/
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Agora é só executar!</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>capify .
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Com isso ganhamos dois arquivos em nosso projeto, são eles:</p>


<ul>
    <li><b>capifile</b> –> Possui referências as bibliotecas usadas pelo Capistrano e é responsável em carregá-las.</li>
    <li><b>config/deploy.rb</b> –> Este possui todas diretrizes para configurar sua implantação, geralmente precisamos editar apenas este.</li>
</ul>




<h2>Confirgurações</h2>


<p>
O Capistrano precisa de algumas informações para que tudo funcione conforme esperamos e isso fazemos editando o arquivo config/deploy.rb. Estou usando um projeto fictício apenas para exemplo, fique atendo as informações que devem ser substituidas conforme as suas configurações.
<br />Vamos lá então!
</p>


<h3>A) Informações do projeto</h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;app_rails&quot;</span>       <span class="c1"># O nome do projeto</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">5</span>               <span class="c1"># Isso guardar os 5 últimos deploys</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span>     <span class="s2">&quot;production&quot;</span>    <span class="c1"># O ambiente em que o Rails irá atuar</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
Toda vez que adicionarmos uma nova funcionalidade ao projeto iremos implementá-la no servidor para que outros tenham acesso e nesse processo, o Capistrano faz o versionamento mantendo seu release anterior. Na linha 2 dizemos que será mantido as 5 últimas atualizações, assim caso algo saia errado neste novo release, podemos usar um comandinho salvador da pátria.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap rollback
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>com isso voltamos ao release que estava funfando.</p>




<h3>B) SCM (source code manager)</h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="s1">&#39;git&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="s2">&quot;git@github.com:LeandroSNunes/app_rails.git&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
No meu caso uso Git como repositório e informo na linha 1. A linha 4 é informado ao Capistrano que ele não precisa pegar todo repositório toda vez que subirmos um novo release, ele somente irá buscar as modificações.
</p>


<h3>C) Informações do servidor</h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_run_options</span><span class="o">[</span><span class="ss">:pty</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">ssh_options</span><span class="o">[</span><span class="ss">:forward_agent</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s2">&quot;leandro&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'><span class="n">server</span> <span class="s2">&quot;leandronunes.com.br&quot;</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/www/app_rails.leandronunes.com.br/</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
Na linha 2 permitimos que o SSH carregue nossa chave para o servidor para que de lá seja acessado o github.<br />
O usuário informado precisa ter permissões de escrita no servidor.<br />
Alguns comandos por default são executados com sudo, porém se tiver usando um servidor compartilhado e que não tiver acesso de superusuário, informe para não utilizar o sudo como na linha 4.<br />
O Capistrano entende que sua aplicação irá fazer muito sucesso e que seja preciso distribuí-la em vários servidores, no meu caso estou enviando tudo para o mesmo lugar então a linha 5 é uma forma otimizada de informar isso.
</p>


<p>Caso precise redirecionar serviços para outros servidores, você pode substituir a linha 5 por:</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="s1">&#39;dominio&#39;</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="s1">&#39;dominio&#39;</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>  <span class="s1">&#39;dominio&#39;</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Ops! Executando.</h2>


<p>Agora é a hora! Vamos implantar nossa aplicação no servidor, começamos verificando se tudo está OK.</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap deploy:check
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Tudo correndo bem, você será informado. Seguindo, criaremos a estrutura de pastas no servidor.</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap deploy:setup
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
O que fizemos? Com isso será criado duas pastas (<em>release</em> e <em>shared</em>) e ainda um link simbólico chamado <em>current</em> apontando para o último release. Na pasta releases é criado uma pasta para o deploy efetuado. A pasta shared serve para armazenar arquivos que serão compartilhados entre os releases, como logs, imagens, arquivos de configuração, etc…
</p>


<p><blockquote><p>Quando trabalhamos com Rails, Git e mais de um desenvolvedor é de prática adicionar nosso arquivo database.yml ao .gitignore, fazendo com que este não seja monitorado e conseguentemente não enviado para o repositório, assim configuramos um único arquivo de banco de dados e colocamos na pasta shared para que todos releases compartilhem a mesma configuração. Mais abaixo vamos adicionar uma tarefa pra fazer isso.</p></blockquote></p>

<h3>A) Criando tarefas para o Capistrano</h3>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;task :start do ; end&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">task</span> <span class="ss">:stop</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   task :restart, :roles =&gt; :app, :except =&gt; { :no_release =&gt; true } do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="n">run</span> <span class="s2">&quot;touch </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/tmp/restart.txt&quot;</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="n">task</span> <span class="ss">:database</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; run &quot;cp </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="sr">/</span><span class="c1">#{shared_dir}/database.yml #{release_path}/config/&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'>   <span class="n">task</span> <span class="ss">:permission</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:web</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">:app</span><span class="o">]</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; run &quot;chmod 755 </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="sr">/</span><span class="kp">public</span> <span class="o">-</span><span class="n">R</span><span class="s2">&quot; </span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;   end</span>
</span><span class='line'><span class="s2">end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;namespace :assets do&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;task :symlink, :roles =&amp;gt; :app do</span>
</span><span class='line'><span class="s2">  assets.create_dir</span>
</span><span class='line'><span class="s2">      run &amp;lt;&amp;lt;-CMD</span>
</span><span class='line'><span class="s2">        rm -rf  </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/public/images/upload &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">        ln -nfs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/upload </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/public/images/upload</span>
</span><span class='line'><span class="s2">      CMD</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">    task :create_dir, :roles =&amp;gt; :app do</span>
</span><span class='line'><span class="s2">      run &quot;</span><span class="n">mkdir</span> <span class="o">-</span><span class="nb">p</span> <span class="c1">#{shared_path}/upload&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;after &quot;deploy:assets:symlink&quot;, &#39;deploy:database&#39;</span>
</span><span class='line'><span class="sr">after &quot;deploy:update_code&quot;, &#39;deploy:permission&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
Ao concluir o deploy é necessário reiniciar o servidor para que as novas configurações entrem em vigor, podemos fazer isso simplesmente atualizando o arquivos <em>tmp/restart.txt</em>, percebam na tarefa restart.
</p>


<p>
Acima adicionamos nosso arquivo database.yml em nossa pasta shared então precisamos adicioná-la dentro do release corrente após o deploy, a tarefa <em>database</em> faz exatamente isso.
</p>


<p>
Na tarefa permissions setamos as permissões necessárias para pasta public.
</p>


<p>
Depois, resolvemos o problemas de aquivos de imagens adicionados pelos usuários (podemos supor um cadastro de produtos). As tarefas dentro de <em>assets</em> criam uma pasta upload dentro de shared e um link simbólico em <em>public/imagens</em> apontando para esta pasta.
</p>




<p>Por fim vamos executar o tão esperado deploy.</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>bash  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap deploy:cold
</span><span class='line'>cap deploy
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
Rodamos o <code>cap deploy:cold</code> primeiro para colocar os arquivos no servido, depois efetuamos o deploy.<br />
A partir da segunda implantação não é necessário rodar <code>cap deploy:cold</code><br />
Se precisar migrar seu banco utilize <code>cap deploy:migrations</code><br />
Alguma coisa fugiu do controle? volte ao release anterior com <code>cap deploy:rollback</code><br />
Para mais informações <code>cap -T</code> para visualizar todas as tarefas do Capistrano.
</p>




<h2>Juntando tudo</h2>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ruby  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Projeto&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;app_rails&quot;</span>       <span class="c1"># O nome do projeto</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">5</span>               <span class="c1"># Isso guardar os 5 últimos deploys</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span>     <span class="s2">&quot;production&quot;</span>    <span class="c1"># O ambiente em que o Rails irá atuar&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">SCM</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;set :scm, &#39;git&#39;</span>
</span><span class='line'><span class="sr">set :repository,  &quot;git@github.com:LeandroSNunes/</span><span class="n">app_rails</span><span class="o">.</span><span class="n">git</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">set :branch, &#39;master&#39;</span>
</span><span class='line'><span class="s2">set :deploy_via, :remote_cache&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;Servidor&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;default_run_options[:pty] = true</span>
</span><span class='line'><span class="s2">ssh_options[:forward_agent] = true</span>
</span><span class='line'><span class="s2">set :user, &quot;</span><span class="n">leandro</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">set :use_sudo, false</span>
</span><span class='line'><span class="s2">server &quot;</span><span class="n">leandronunes</span><span class="o">.</span><span class="n">com</span><span class="o">.</span><span class="n">br</span><span class="s2">&quot;, :web, :app, :db, :primary =&gt; true</span>
</span><span class='line'><span class="s2">set :deploy_to, &quot;</span><span class="o">/</span><span class="n">www</span><span class="o">/</span><span class="n">app_rails</span><span class="o">.</span><span class="n">leandronunes</span><span class="o">.</span><span class="n">com</span><span class="o">.</span><span class="n">br</span><span class="o">/</span><span class="c1">#{application}&quot;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Tarefas</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;namespace :deploy do&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">task</span> <span class="ss">:start</span> <span class="k">do</span> <span class="p">;</span> <span class="k">end</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;task :stop do ; end&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; run &quot;touch </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="sr">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">restart</span><span class="o">.</span><span class="n">txt</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2"> end</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;   task :database, :roles =&gt; :app do&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt; run &quot;</span><span class="n">cp</span> <span class="c1">#{deploy_to}/#{shared_dir}/database.yml #{release_path}/config/&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'>   <span class="n">task</span> <span class="ss">:permission</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:web</span><span class="p">,</span> <span class="ss">:db</span><span class="p">,</span> <span class="ss">:app</span><span class="o">]</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; run &quot;chmod 755 </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="sr">/</span><span class="kp">public</span> <span class="o">-</span><span class="n">R</span><span class="s2">&quot; </span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;   end</span>
</span><span class='line'><span class="s2">end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;namespace :assets do&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;pre&gt;&lt;code&gt;task :symlink, :roles =&amp;gt; :app do</span>
</span><span class='line'><span class="s2">  assets.create_dir</span>
</span><span class='line'><span class="s2">      run &amp;lt;&amp;lt;-CMD</span>
</span><span class='line'><span class="s2">        rm -rf  </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/public/images/upload &amp;amp;&amp;amp;</span>
</span><span class='line'><span class="s2">        ln -nfs </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/upload </span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/public/images/upload</span>
</span><span class='line'><span class="s2">      CMD</span>
</span><span class='line'><span class="s2">end</span>
</span><span class='line'><span class="s2">    task :create_dir, :roles =&amp;gt; :app do</span>
</span><span class='line'><span class="s2">      run &quot;</span><span class="n">mkdir</span> <span class="o">-</span><span class="nb">p</span> <span class="c1">#{shared_path}/upload&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;after &quot;deploy:assets:symlink&quot;, &#39;deploy:database&#39;</span>
</span><span class='line'><span class="sr">after &quot;deploy:update_code&quot;, &#39;deploy:permission&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Então...</h2>


<p>
Isso foi minha colheita em um dia de deploy aqui na empresa e basicamente quando for efetuar um deploy da sua aplicação você vai estar neste ciclo novamente:
</p>


<ul>
    <li>Adicionar seu último release em um repositório</li>
    <li>Iniciar o monitoramento do Capistrano no diretório de sua aplicação</li>
    <li>Editar o arquivo de configuração do Capistrano</li>
    <li>Fazer um confere das configurações no servidor</li>
    <li>Montar a estrutura de pastas no servidor</li>
    <li>Fazer deploy de sua aplicação</li>
    <li>Configurar o ambiente de produção</li>
    <li>Cruzar os dedos e atualizar seu navegador</li>
</ul>


<p>
Algumas informações tive acesso dando umas googladas e dois blogs que usei de referências foram 
<a href="http://blog.dmitrynix.com/deploy-capistrano/" >Unix and Me</a> e <a href="http://objetiva.co/blog/2008/06/25/capistrano-com-git-tutorial-bsico" >Objetiva</a>, acessem para visualizarem o conteúdo completo.
</p>


<p>
Para mais informações
<a href="https://github.com/capistrano/capistrano/wiki/_pages">https://github.com/capistrano/capistrano/wiki/_pages</a>
</p>



]]></content>
  </entry>
  
</feed>
